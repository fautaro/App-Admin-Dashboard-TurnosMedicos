@using BusinessEntity.Response
@model ProfesionalResponse


@{
    ViewData["Title"] = "Administrar Horas";
}

<!DOCTYPE html>
<html lang='es'>
<head>
    <meta charset='utf-8' />
    <link href="~/css/sb-admin-2.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=sans-serif&display=swap" rel="stylesheet">
    <link href="~/css/vue-datepicker.css" rel="stylesheet">
    <link href="~/css/awesome-notifications.css" rel="stylesheet">
    <link href="~/css/sweetalert2.min.css" rel="stylesheet">
</head>
<body>
    <style>
        .fade-enter-active,
        .fade-leave-active {
            transition: opacity 0.5s ease;
        }

        .fade-enter-from,
        .fade-leave-to {
            opacity: 0;
        }
        /* custom-styles.css */
        .col-md-12 {
            padding-left: 0;
            padding-right: 0;
        }

    </style>
    <div id="app">
        <div class="row">
            <div class="d-flex justify-content-center">
                <div class="col-xl-6 col-lg-6">
                    <!-- Usa col-md-6 para dispositivos medianos y más grandes -->
                    <div class="card shadow mb-4">
                        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                            <h6 class="m-0 font-weight-bold text-primary">Configuración de Horarios no disponibles</h6>
                        </div>
                        <div class="card-body">
                            <div class="container">
                                <div class="row">
                                    <transition name="fade" mode="out-in">
                                        <div v-if="pag == 0">
                                            <div style="text-align:center;margin-bottom:30px">
                                                <h4>Por favor, seleccione un día</h4>
                                            </div>
                                            <div class="col-md-12 d-flex justify-content-center">
                                                <div class="secondary-card-body text-center">
                                                    @* Dia completo*@
                                                    <div class="form-group text-center" v-if="diaUnico">
                                                        <Datepicker class="text-center" v-model="fechaSeleccionada" model-type="dd/MM/yyyy" inline locale="es" :min-date="new Date()" :enable-time-picker="false" auto-apply :disabled-dates="fechasBloqueadas" :disabled-week-days="[6, 0]" />
                                                    </div>
                                                    @* Rango de dias*@
                                                    <div class="form-group text-center" v-else>
                                                        <Datepicker class="text-center" v-model="fechaSeleccionadaRango" model-type="dd/MM/yyyy" inline locale="es" :min-date="new Date()" :enable-time-picker="false" auto-apply :disabled-dates="fechasBloqueadas" :disabled-week-days="[6, 0]" range />
                                                    </div>
                                                    <div class="form-group form-check">
                                                        <input type="checkbox" class="form-check-input" v-on:click="checkDiaUnico()" id="diaCompleto">
                                                        <label class="form-check-label" for="diaCompleto">Bloquear un solo día</label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div v-else-if="pag == 1">
                                            <div style="text-align:center;margin-bottom:30px">
                                                @* Dia completo*@
                                                <h4 v-if="diaUnico">Por favor, seleccione el horario para el día {{fechaSeleccionada}}</h4>
                                                @* Rango de dias*@
                                                <h4 v-else>
                                                    Por favor, seleccione el horario para el rango {{ fechaSeleccionadaRango[0] }} al {{fechaSeleccionadaRango[1]}}
                                                </h4>
                                            </div>
                                            <div class="col-md-12" v-if="diaUnico">
                                                <div class="form-group">
                                                    <label for="horaInicio">Hora de Inicio</label>
                                                    <div class="input-group date">
                                                        <select class="form-control" id="horaInicio" v-model="horaInicio">
                                                            <option v-for="hour in horasDisponiblesDiaUnico" :key="hour">{{ hour }}</option>
                                                        </select>
                                                        <div class="input-group-append">
                                                            <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label for="horaFin">Hora de Fin</label>
                                                    <div class="input-group date">
                                                        <select class="form-control" id="horaFin" v-model="horaFin">
                                                            <option v-for="hour in horasDisponiblesDiaUnico" :key="hour">{{ hour }}</option>
                                                        </select>
                                                        <div class="input-group-append">
                                                            <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-12" v-else>
                                                <div class="form-group">
                                                    <label for="horaInicio">Hora de Inicio - día {{ fechaSeleccionadaRango[0] }}</label>
                                                    <div class="input-group date">
                                                        <select class="form-control" id="horaInicio" v-model="horaInicio">
                                                            <option v-for="hour in horasDisponiblesRangoInicio" :key="hour">{{ hour }}</option>
                                                        </select>
                                                        <div class="input-group-append">
                                                            <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label for="horaFin">Hora de Fin - día {{fechaSeleccionadaRango[1]}}</label>
                                                    <div class="input-group date">
                                                        <select class="form-control" id="horaFin" v-model="horaFin">
                                                            <option v-for="hour in horasDisponiblesRangoFin" :key="hour">{{ hour }}</option>
                                                        </select>
                                                        <div class="input-group-append">
                                                            <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </transition>
                                </div>
                                <div class="row mt-4">
                                    <div class="form-group">
                                        <button type="submit" class="btn btn-primary" v-on:click="nextPag()">Siguiente</button>
                                        <button type="submit" class="btn btn-secondary ms-2">Limpiar</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="~/js/vue.global.js"></script>
    <script src="~/js/vue-datepicker.js"></script>
    <script src="~/js/sweetalert2.all.min.js"></script>
    <script src="~/js/awesome-notifications.js"></script>
    <script>
        const app = Vue.createApp({

            data() {
                return {
                    pag: 0,
                    fechasBloqueadas: [], //"2023/08/15"
                    horasDisponibles: [], //"09:00"
                    selectFecha: false,
                    //fecha
                    diaUnico: false,
                    fechaSeleccionadaRango: "",
                    fechaSeleccionada: "",
                    //hora
                    //horasDisponiblesDiaUnico: ["", "09:00:00", "10:00:00", "11:00:00", "12:00:00", "16:00:00", "17:00:00"],
                    horasDisponiblesDiaUnico: [],
                    horasDisponiblesRangoInicio: [],
                    horasDisponiblesRangoFin: [],
                    horaInicio: "",
                    horaFin: "",
                    //Notificador
                    notifier: new AWN({
                        durations: {
                            global: 2000,
                            info: null
                        }
                    })


                }
            },
            mounted() {
                let message = '<h3 style="margin-top: 0;">Bloqueo de agenda</h3><p> Esta función te permite bloquear ciertos horarios o incluso todo un día para que nadie más pueda hacer reservas en esos momentos. Pero, si ya hay reservas confirmadas en esos horarios, deberás cancelarlas manualmente desde la pantalla de "Turnos confirmados"</p><small> Haz click afuera de esta ventana para cerrarla.</small>';
                this.notifier.modal(message)
                this.getDiasBloqueados();
            },
            components: {
                Datepicker: VueDatePicker
            },
            methods: {
                nextPag() {
                    if (this.pag == 0) {
                        if (this.diaUnico) {
                            if (this.fechaSeleccionada == "") {
                                this.notifier.info('Por favor, seleccione una fecha');
                            } else {
                                const request = {
                                    Profesional_Id: @Model.Profesional_Id,
                                    Fecha: this.fechaSeleccionada,
                                    inicioDiaUnico: true
                                }
                                this.getHorasDisponibles(request);

                                this.pag++
                            }
                        } else {
                            if (this.fechaSeleccionadaRango == "") {
                                this.notifier.info('Por favor, seleccione un rango de fechas');
                            } else {
                                const horasInicio = {
                                    Profesional_Id: @Model.Profesional_Id,
                                    Fecha: this.fechaSeleccionadaRango[0],
                                    inicioRango: true
                                };
                                this.getHorasDisponibles(horasInicio);

                                const horasFin = {
                                    Profesional_Id: @Model.Profesional_Id,
                                    Fecha: this.fechaSeleccionadaRango[1],
                                    finRango: true
                                };
                                this.getHorasDisponibles(horasFin);

                                this.pag++;

                            }
                        }
                    } else if (this.pag == 1) {
                        if (this.horaInicio == "" && this.horaFin == "") {
                            this.notifier.info('Por favor, seleccione una hora de inicio y una hora de fin');
                        }
                        else if (this.horaInicio == "") {
                            this.notifier.info('Por favor, seleccione una hora de inicio');
                        } else if (this.horaFin == "") {
                            this.notifier.info('Por favor, seleccione una hora de fin');
                        } else if (this.horaInicio == this.horaFin && this.diaUnico) {
                            this.notifier.info('La hora de inicio y la hora de fin no pueden coincidir');
                        } else if (this.horaInicio > this.horaFin) {
                            this.notifier.info('La hora de inicio debe ser mayor a la hora de fin');
                        }
                        else {
                            this.guardarHorario();

                        }
                    }
                },
                guardarHorario() {
                    let obj = {};
                    if (this.diaUnico) {
                        obj = {
                            fechaInicio: this.fechaSeleccionada,
                            fechaFin: null,
                            horaInicio: this.horaInicio,
                            horaFin: this.horaFin
                        }
                    }
                    else {
                        obj = {
                            fechaInicio: this.fechaSeleccionadaRango[0],
                            fechaFin: this.fechaSeleccionadaRango[1],
                            horaInicio: this.horaInicio,
                            horaFin: this.horaFin
                        }
                    }
                    Swal.fire({
                        title: 'Guardar horario bloqueado',
                        text: `¿Está seguro de guardar el horario bloqueado?`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Confirmar',
                        cancelButtonText: 'Atrás',
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                title: "Guardando horario",
                            })
                            Swal.showLoading()
                            fetch(`/Acciones/GuardarHorarioBloqueado`, {
                                method: "POST",
                                body: JSON.stringify(obj),
                                headers: {
                                    "Content-Type": "application/json"
                                },
                            }).then(response => response.json())
                                .then(success => {
                                    Swal.hideLoading()
                                    if (success) {
                                        Swal.fire(
                                            'Horario bloqueado guardado',
                                            'El horario bloqueado ha sido guardado correctamente.',
                                            'success'
                                        ).then((result) => {
                                            window.location.href = '/Acciones/HorariosBloqueados';

                                        });
                                    } else {
                                        Swal.fire(
                                            'Horario bloqueado no guardado',
                                            'No ha sido posible guardar el horario bloqueado.',
                                            'info'
                                        )
                                    }
                                })
                                .catch(error => {
                                    Swal.hideLoading()
                                    Swal.fire(
                                        'Horario bloqueado no guardado',
                                        'No ha sido posible guardar el horario bloqueado.',
                                        'info'
                                    ).then((result) => {
                                        window.location.reload();
                                    });
                                });
                        }
                    })
                },
                checkDiaUnico() {
                    if (this.diaUnico) {
                        this.diaUnico = false;
                        this.fechaSeleccionadaRango = "";
                    } else {
                        this.diaUnico = true;
                        this.fechaSeleccionada = "";
                    }
                },
                getDiasBloqueados() {
                    const self = this;

                    const Profesional = {
                        Profesional_Id: '@Model.Profesional_Id'
                    }

                    fetch('@Url.Action("GetDiasBloqueados", "Acciones")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(Profesional),
                    })
                        .then(response => response.json())
                        .then(responseData => {
                            if (responseData.success) {
                                this.fechasBloqueadas = responseData.diasBloqueados;
                            }
                        })
                        .catch(error => {
                        });
                },

                getHorasDisponibles(request) {
                    fetch('@Url.Action("GetHorasDisponibles", "Acciones")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(request),
                    })
                        .then(response => response.json())
                        .then(responseData => {
                            if (responseData.success) {
                                if (request.inicioRango) {
                                    this.horasDisponiblesRangoInicio = responseData.horasDisponibles;
                                }
                                if (request.finRango) {
                                    this.horasDisponiblesRangoFin = responseData.horasDisponibles;
                                }
                                if (request.inicioDiaUnico) {
                                    this.horasDisponiblesDiaUnico = responseData.horasDisponibles;
                                }
                                return responseData.horasDisponibles;
                            } else {
                                throw new Error('Error en la solicitud');
                            }
                        })
                        .catch(error => {
                            console.error('Error al enviar la solicitud:', error);
                        });
                }


            }
        });

        app.mount('#app');
    </script>
</body>


</html>